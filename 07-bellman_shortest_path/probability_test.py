#!/usr/bin/env python3

import sys
sys.path.append("..")
#import check_versions
import numpy
from numpy import array
from robot_test import Environment
from robot_control import RobotControl

# Run a single tests to verify the correctness of calculating the probabilities and policies
def evaluate(destination, rotation_probability, energy, expected_distance, expected_policy):
    env = Environment(destination=array(destination), energy=array(energy), rotation_probability=array(rotation_probability))

    print("Test energy map:")
    print(energy)
    print("Destination", destination)
    print("Probabilities of rotations: forward", env.forward_probability, "right", env.right_probability, "backward", env.backward_probability, "left", env.left_probability)

    robot = RobotControl(env)
    distance = robot.get_distance()
    policy = robot.get_policy()

    print("Expected distance:")
    print(expected_distance)
    print("Your distance:")
    print(distance)
    print("Expected policy:")
    print(expected_policy)
    print("Your policy:")
    print(policy)

    incorrect_policies = 0
    max_distance_diff = 0.
    for i in range(env.rows):
        for j in range(env.columns):
            if i != destination[0] or j != destination[1]:
                max_distance_diff = max(max_distance_diff, abs(distance[i,j] - expected_distance[i,j]))
                if policy[i,j] != expected_policy[i,j]:
                    incorrect_policies += 1

    print("The number of positions with incorrect policies is", incorrect_policies)
    print("The maximal of differences between the correct and your distances is", max_distance_diff)

    return (incorrect_policies, max_distance_diff)

def main():
    # destination, rotation_probability, energy, expected_distance, expected_policy
    tests = {
        "1": ((1,1), (1,0,0,0),
array([[ 9., 2., 3. ],
       [ 4., 0., 5. ],
       [ 6., 7., 8. ]]),
array([[ 2., 0., 2. ],
       [ 0., 0., 0. ],
       [ 4., 0., 5. ]]),
array([[1, 2, 3],
       [1, 0, 3],
       [0, 0, 0]])),

        "2": ((1,1), (0,1,0,0),
array([[ 9., 2., 3. ],
       [ 4., 0., 5. ],
       [ 6., 7., 8. ]]),
array([[ 2., 0., 2. ],
       [ 0., 0., 0. ],
       [ 4., 0., 5. ]]),
array([[0, 1, 2],
       [0, 0, 2],
       [3, 3, 1]])),

        "3": ((1,1), (0,0,1,0),
array([[ 9., 2., 3. ],
       [ 4., 0., 5. ],
       [ 6., 7., 8. ]]),
array([[ 2., 0., 2. ],
       [ 0., 0., 0. ],
       [ 4., 0., 5. ]]),
array([[3, 0, 1],
       [3, 0, 1],
       [2, 2, 0]])),

        "4": ((1,1), (0,0,0,1),
array([[ 9., 2., 3. ],
       [ 4., 0., 5. ],
       [ 6., 7., 8. ]]),
array([[ 2., 0., 2. ],
       [ 0., 0., 0. ],
       [ 4., 0., 5. ]]),
array([[2, 3, 0],
       [2, 0, 0],
       [1, 1, 1]])),

       "5": ((0,0), (1,0,0,0),
array([[  0., 11., 12. ],
       [ 13., 14., 15. ],
       [ 16., 17., 18. ]]),
array([[ 0.,  0.,  0.],
       [ 0., 11., 12.],
       [ 0., 11., 12.]]),
array([[0, 3, 1],
       [0, 0, 0],
       [2, 2, 2]])),

       "6": ((0,2), (1,0,0,0),
array([[ 10., 11.,  0. ],
       [ 13., 14., 15. ],
       [ 16., 17., 18. ]]),
array([[ 0.,  0.,  0.],
       [10., 11.,  0.],
       [10., 11.,  0.]]),
array([[3, 1, 0],
       [0, 0, 0],
       [2, 2, 2]])),

       "7": ((2,0), (1,0,0,0),
array([[ 10., 11., 12. ],
       [ 13., 14., 15. ],
       [  0., 17., 18. ]]),
array([[ 0., 10., 10.],
       [ 0., 13., 13.],
       [ 0.,  0.,  0.]]),
array([[0, 3, 1],
       [2, 3, 1],
       [0, 3, 1]])),

       "8": ((2,2), (1,0,0,0),
array([[ 10., 11., 12. ],
       [ 13., 14., 15. ],
       [ 16., 17.,  0. ]]),
array([[12., 12.,  0.],
       [15., 15.,  0.],
       [ 0.,  0.,  0.]]),
array([[3, 1, 0],
       [3, 1, 2],
       [3, 1, 0]])),

        "9": ((1,1), (1,0,0,0),
array([[ 1., 2., 3. ],
       [ 4., 0., 5. ],
       [ 6., 7., 8. ]]),
array([[ 2., 0., 2. ],
       [ 0., 0., 0. ],
       [ 3., 0., 5. ]]),
array([[1, 2, 3],
       [1, 0, 3],
       [2, 0, 0]])),

        "10": ((1,1), (1,0,0,0),
array([[ 100., 100., 100., 101., 100. ],
       [ 101., 0., 1., 1., 100. ],
       [ 100., 6., 4., 1., 100. ],
       [ 100., 1., 1., 1., 100. ],
       [ 100., 1., 4., 6., 100. ],
       [ 100., 1., 1., 1., 100. ],
       [ 100., 6., 4., 1., 100. ],
       [ 100., 1., 1., 1., 100. ],
       [ 100., 1., 4., 6., 100. ],
       [ 100., 1., 1., 1., 100. ],
       [ 100., 6., 4., 1., 100. ],
       [ 100., 1., 1., 1., 100. ],
       [ 100., 1., 4., 6., 100. ],
       [ 100., 1., 1., 1., 100. ],
       [ 100., 100., 100., 100., 100. ]]),
array([[100.,   0.,   1.,   2., 102.],
       [  0.,   0.,   0.,   1.,   2.],
       [  6.,   0.,   1.,   2.,   3.],
       [  6.,   5.,   4.,   3.,   4.],
       [  7.,   6.,   5.,   4.,  10.],
       [  8.,   7.,   8.,   9.,  10.],
       [ 14.,   8.,   9.,  10.,  11.],
       [ 14.,  13.,  12.,  11.,  12.],
       [ 15.,  14.,  13.,  12.,  18.],
       [ 16.,  15.,  16.,  17.,  18.],
       [ 22.,  16.,  17.,  18.,  19.],
       [ 22.,  21.,  20.,  19.,  20.],
       [ 23.,  22.,  21.,  20.,  26.],
       [ 24.,  23.,  24.,  25.,  26.],
       [124.,  24.,  25.,  26., 126.]]),
array([[1, 2, 2, 2, 2],
       [1, 0, 3, 3, 3],
       [1, 0, 0, 0, 3],
       [1, 1, 1, 0, 3],
       [1, 0, 0, 0, 3],
       [1, 0, 3, 3, 3],
       [1, 0, 0, 0, 3],
       [1, 1, 1, 0, 3],
       [1, 0, 0, 0, 3],
       [1, 0, 3, 3, 3],
       [1, 0, 0, 0, 3],
       [1, 1, 1, 0, 3],
       [1, 0, 0, 0, 3],
       [1, 0, 3, 3, 3],
       [0, 0, 0, 0, 0]])),

        "11": ((1,1), (.4,.2,.2,.2),
array([[ 9., 2., 3. ],
       [ 4., 0., 5. ],
       [ 6., 7., 8. ]]),
array([[24.240741, 17.166667, 25.425926],
       [17.574074,  0.      , 16.759259],
       [26.87037 , 17.166667, 25.796296]]),
array([[1, 2, 3],
       [1, 0, 3],
       [0, 0, 0]])),

        "12": ((1,1), (.4,.3,.2,.1),
array([[ 9., 2., 3. ],
       [ 4., 0., 5. ],
       [ 6., 7., 8. ]]),
array([[21.720018, 16.494243, 23.059375],
       [16.219411,  0.      , 15.067704],
       [24.446227, 16.361499, 24.060094]]),
array([[1, 2, 2],
       [1, 0, 3],
       [0, 0, 3]])),

        "13": ((0,1), (.4,.2,.2,.2),
array([[ 1., 0., 1. ],
       [ 1., 10., 1. ],
       [ 1., 1., 1. ],
       [ 1., 1., 1. ],
       [ 1., 1., 1. ],
       [ 1., 1., 1. ],
       [ 1., 1., 1. ]]),
array([[ 6.536001,  0.      ,  6.536001],
       [13.587524,  9.832894, 13.587524],
       [17.445199, 18.98942 , 17.445199],
       [18.616328, 18.778611, 18.616328],
       [16.620752, 16.335489, 16.620752],
       [13.265595, 12.328666, 13.265595],
       [ 9.556481,  6.888325,  9.556481]]),
array([[1, 0, 3],
       [0, 0, 0],
       [0, 1, 0],
       [2, 2, 2],
       [2, 2, 2],
       [2, 2, 2],
       [2, 2, 2]])),    

       "14": ((2,3), (1,0,0,0),
array([[1.864 , 4.4329, 6.312 , 2.6543, 1.912 ],
       [5.8338, 2.7948, 0.    , 0.1748, 2.9702],
       [1.3889, 2.9069, 1.2973, 8.5596, 0.8003]]),
array([[10.7488, 11.5292,  8.7344,  8.5596,  9.3599],
       [10.7488,  8.7344,  8.7344,  8.5596,  8.7344],
       [ 9.3599,  9.8569,  8.5596,  0.    ,  8.5596]]),
array([[0, 2, 2, 0, 0],
       [2, 1, 1, 2, 3],
       [3, 1, 1, 0, 3]])),

       "15": ((4,3), (1,0,0,0),
array([[1.864 , 4.4329, 6.312 , 2.6543, 1.912 ],
       [5.8338, 2.7948, 3.4227, 0.1748, 2.9702],
       [1.3889, 2.9069, 1.2973, 8.5596, 0.8003],
       [0.9874, 5.1054, 0.    , 1.3459, 5.5921],
       [3.226 , 0.1908, 6.7132, 1.7523, 4.3909],
       [2.0506, 8.7113, 0.7706, 0.8218, 2.2346],
       [0.8339, 3.2938, 0.543 , 9.6469, 1.7962]]),
array([[7.4388, 7.1815, 3.8877, 7.993 , 6.6049],
       [8.6913, 7.3024, 4.3955, 7.8182, 7.993 ],
       [7.3024, 4.3955, 3.0982, 3.0982, 8.6903],
       [8.2036, 3.0982, 3.0982, 1.7523, 3.0982],
       [6.1432, 8.2036, 1.7523, 0.    , 1.7523],
       [4.8087, 3.3447, 2.5741, 1.7523, 2.5741],
       [6.6049, 3.8877, 3.3447, 2.5741, 4.8087]]),
array([[0, 0, 0, 2, 0],
       [2, 2, 2, 3, 3],
       [1, 1, 2, 2, 2],
       [1, 1, 1, 2, 3],
       [3, 0, 1, 0, 3],
       [3, 1, 1, 0, 3],
       [3, 1, 0, 0, 0]])),

       "16": ((4, 5), (0.4, 0.361247, 0.025903, 0.21285),
array([[ 1.864041,  4.432889,  6.311956,  2.65428 ,  1.91201 ,  5.833797,  2.794818,  3.422686,  0.17483 ],
       [ 2.970219,  1.388945,  2.906939,  1.297296,  8.559583,  0.80034 ,  0.987354,  5.105444, 10.495868],
       [ 1.34585 ,  5.592108,  3.226013,  0.190834,  6.713173,  1.752331,  4.390865,  2.050603,  8.711304],
       [ 0.77061 ,  0.82185 ,  2.234567,  0.833858,  0.      ,  0.543006,  9.646865,  1.796218,  3.357212],
       [ 4.177859,  7.938566,  0.284866,  1.532829,  9.413375,  1.940443,  2.902589,  5.075948,  4.755532],
       [ 4.019696,  1.06274 ,  1.915935,  5.316311,  6.777291,  6.280372, 11.464919,  0.286654,  0.951157],
       [ 3.748847,  0.572896,  3.756583,  1.870234,  2.215651, 10.424481, 22.641383,  3.547671,  4.154724]]),
array([[71.587686, 66.799719, 61.784061, 59.004052, 59.624368, 58.662287, 63.092253, 68.364257, 73.324585],
       [68.377266, 64.605827, 58.196601, 54.981989, 51.482301, 51.139547, 54.860985, 62.464903, 70.081646],
       [65.804762, 58.50375 , 50.701597, 46.137836, 39.542317, 37.976758, 45.631223, 56.14799 , 62.743428],
       [63.25543 , 57.715153, 46.21972 , 38.639707, 31.986556, 22.643247, 33.965631, 50.999398, 59.990674],
       [63.971421, 55.818831, 47.979944, 39.239597, 23.373305,  0.      , 29.738405, 46.084176, 58.843421],
       [65.153768, 60.634755, 52.633918, 46.141658, 39.522089, 32.429699, 44.359105, 57.538654, 63.553738],
       [68.68114 , 64.34737 , 58.268877, 55.89292 , 54.561229, 52.596691, 61.289054, 69.426928, 69.403572]]),
array([[1, 1, 1, 1, 3, 2, 2, 2, 0],
       [1, 1, 1, 2, 2, 2, 2, 2, 2],
       [1, 1, 1, 1, 2, 2, 2, 2, 2],
       [0, 1, 1, 1, 1, 2, 2, 3, 2],
       [0, 1, 1, 0, 0, 0, 3, 3, 3],
       [0, 1, 0, 0, 0, 0, 0, 0, 3],
       [0, 0, 0, 0, 3, 3, 3, 0, 0]])),

       "17": ((7, 6), (0.6, 0.129096, 0.048828, 0.222076),
array([[1.864041e+00, 4.432889e+00, 6.311956e+00, 2.654280e+00, 1.912010e+00, 5.833797e+00, 2.794818e+00, 3.422686e+00, 1.748296e-01, 2.970219e+00, 1.388945e+00],
       [2.906939e+00, 1.297296e+00, 8.559583e+00, 8.003398e-01, 9.873536e-01, 5.105444e+00, 1.049587e+01, 1.345850e+00, 5.592108e+00, 3.226013e+00, 1.908344e-01],
       [6.713173e+00, 1.752331e+00, 4.390865e+00, 2.050603e+00, 8.711304e+00, 7.706095e-01, 8.218498e-01, 2.234567e+00, 8.338580e-01, 3.293815e+00, 5.430058e-01],
       [9.646865e+00, 1.796218e+00, 3.357212e+00, 4.177859e+00, 7.938566e+00, 2.848659e-01, 1.532829e+00, 9.413375e+00, 1.940443e+00, 2.902589e+00, 5.075948e+00],
       [4.755532e+00, 4.019696e+00, 1.062740e+00, 1.915935e+00, 5.316311e+00, 6.777291e+00, 6.280372e+00, 1.146492e+01, 2.866536e-01, 9.511573e-01, 3.748847e+00],
       [5.728955e-01, 3.756583e+00, 1.870234e+00, 2.215651e+00, 1.042448e+01, 2.264138e+01, 3.547671e+00, 4.154724e+00, 4.400122e+00, 1.308252e+01, 7.680946e+00],
       [1.455629e+00, 2.480491e+00, 8.465064e+00, 3.871816e+00, 3.503526e+00, 0.000000e+00, 6.865094e+00, 3.033251e+00, 1.160614e+01, 1.224659e-02, 4.011425e+00],
       [2.015195e+00, 7.238840e+00, 1.010192e+01, 3.995933e+00, 4.015114e+00, 4.628188e+00, 6.527245e+00, 7.865932e+00, 4.254089e-01, 3.389442e+00, 2.805231e+00],
       [6.744596e-01, 5.392216e+00, 2.328087e+00, 7.018923e+00, 1.066962e+01, 2.481954e+00, 6.866165e-01, 4.570490e+00, 2.580088e+01, 5.010473e+00, 3.058032e+00],
       [9.244201e+00, 1.069470e+01, 2.999845e+00, 2.112717e+01, 8.747328e+00, 1.316188e+00, 3.990755e+00, 3.382583e+01, 2.060988e+00, 7.039835e+00, 1.390385e+00],
       [2.782159e+00, 1.511451e+01, 4.882823e-01, 5.621786e-01, 1.515415e+01, 2.322636e+00, 8.566184e+00, 6.364302e+00, 2.505558e+00, 1.850263e+00, 7.950014e-01],
       [1.416677e+00, 6.697207e+00, 1.991169e+00, 1.005210e+01, 8.390594e+00, 8.310030e+00, 2.817146e+00, 1.003625e+01, 2.739339e+00, 6.338128e+00, 1.037500e+01],
       [2.852662e+00, 6.481832e+00, 2.182930e-01, 1.160502e+00, 1.391117e+00, 1.491163e-01, 4.306796e+00, 5.316608e+00, 5.845711e+00, 1.374475e+01, 4.621907e+00]]),
array([[80.762824, 81.780831, 80.201512, 76.376702, 73.76033 , 69.841965, 71.540819, 73.190123, 75.865886, 76.813907, 77.572992],
       [77.238212, 77.841412, 75.117034, 74.383395, 74.971655, 69.214405, 66.511765, 70.212917, 68.010724, 71.378956, 74.15883 ],
       [74.778886, 72.752305, 68.908736, 69.371865, 68.004193, 63.582319, 61.50519 , 64.740878, 63.319283, 65.8231  , 70.913259],
       [71.049817, 68.353347, 62.215301, 61.157871, 62.058546, 60.06251 , 56.073366, 58.015045, 57.609446, 61.088776, 66.367033],
       [65.693109, 62.206528, 57.38843 , 54.18511 , 55.477683, 53.563331, 44.161666, 45.340808, 52.315499, 57.351887, 62.9276  ],
       [63.490328, 59.122396, 53.427131, 47.698012, 41.937585, 31.023766, 31.35891 , 35.603397, 44.144374, 51.192271, 61.137404],
       [60.548331, 60.330463, 49.074108, 39.780989, 30.842709, 22.609678, 15.03265 , 26.204781, 35.046198, 50.324671, 54.917248],
       [60.368352, 61.047693, 48.267615, 36.896881, 25.367394, 13.192464,  0.      , 17.600935, 39.104424, 46.855883, 54.847978],
       [64.337828, 64.564267, 56.694369, 45.05913 , 28.45486 , 19.365055, 14.997699, 31.362761, 43.311924, 57.241176, 60.196274],
       [69.180764, 73.053618, 67.251978, 53.400165, 39.88809 , 30.338982, 28.589261, 41.486375, 71.209928, 66.274829, 67.974016],
       [78.270714, 78.974885, 73.625576, 70.883667, 51.210098, 43.226387, 41.12485 , 59.831373, 70.251509, 73.87393 , 73.253826],
       [84.692903, 85.872886, 79.828779, 74.346751, 65.905804, 54.778054, 56.900601, 65.350855, 75.511625, 79.025305, 78.816807],
       [85.281006, 84.004027, 79.803697, 75.583938, 69.827352, 66.203603, 64.167392, 71.926192, 78.033207, 82.487378, 83.727775]]),
array([[3, 2, 1, 1, 0, 0, 0, 2, 2, 2, 2],
       [3, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2],
       [3, 2, 2, 2, 1, 2, 2, 3, 2, 3, 3],
       [2, 2, 2, 2, 2, 1, 2, 2, 2, 3, 3],
       [2, 1, 2, 2, 2, 1, 2, 2, 2, 3, 3],
       [2, 1, 1, 2, 2, 2, 2, 2, 3, 3, 2],
       [3, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3],
       [3, 1, 1, 1, 1, 1, 0, 3, 3, 3, 3],
       [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
       [3, 1, 1, 1, 1, 0, 0, 3, 3, 0, 0],
       [0, 1, 0, 1, 1, 0, 0, 3, 0, 0, 0],
       [2, 1, 1, 1, 1, 0, 0, 3, 3, 2, 2]]))
}

    if len(sys.argv) == 1:
        sum_incorrect_policies = max_distance_diff = 0
        for name in tests:
            print("Running test", name)
            incorrect_policies, distance_diff = evaluate(*tests[name])
            sum_incorrect_policies += incorrect_policies
            max_distance_diff = max(max_distance_diff, distance_diff)
            print()
        success = sum_incorrect_policies == 0 and max_distance_diff < 1e-2
        print("All tests passed." if success else "Some tests failed.", "The total number of positions with incorrect policies is", sum_incorrect_policies, "and the maximal of differences between the correct and your distance is", max_distance_diff)
    else:
        name = sys.argv[1]
        if name in tests:
            evaluate(*tests[name])
        else:
            print("Unknown test", name)

"""
To run all tests, run the command
$ python3 probability_test.py

To run a test NAME, run the command
$ python3 probability_test.py NAME
"""
if __name__ == "__main__":
    main()
