import sys
import numpy
from numpy import array
from robot_test import Environment
from robot_control import RobotControl

# Run a single tests to verify the correctness of calculating the probabilities and policies
def evaluate(destination, rotation_probability, energy_restricted, expected_distance, expected_policy):
    rows = len(energy_restricted) + 2
    columns = len(energy_restricted[0]) + 2
    energy = numpy.full((rows, columns), 100.)
    energy[1:rows-1,1:columns-1] = energy_restricted
    env = Environment(destination=array(destination), energy=energy, rotation_probability=array(rotation_probability))

    print("Test energy map:")
    print(energy)
    print("Destination", destination)
    print("Probabilities of rotations: forward", env.forward_probability, "right", env.right_probability, "backward", env.backward_probability, "left", env.left_probability)

    robot = RobotControl(env)
    distance = robot.get_distance()
    policy = robot.get_policy()

    print("Expected distance:")
    print(expected_distance)
    print("Your distance:")
    print(distance)
    print("Expected policy:")
    print(expected_policy)
    print("Your policy:")
    print(policy)

    incorrect_policies = 0
    max_distance_diff = 0.
    for i in range(1,env.rows-1):
        for j in range(1,env.columns-1):
            if i != destination[0] or j != destination[1]:
                max_distance_diff = max(max_distance_diff, abs(distance[i,j] - expected_distance[i-1,j-1]))
                if policy[i,j] != expected_policy[i-1,j-1]:
                    incorrect_policies += 1

    print("The number of positions with incorrect policies is", incorrect_policies)
    print("The maximal of differences between the correct and your distances is", max_distance_diff)

    return (incorrect_policies, max_distance_diff)

def main():
    # destination, rotation_probability, energy, expected_distance, expected_policy
    tests = {
        "first": ((1,1), (1,0,0,0),
array([[ 0., 2.],
       [ 1., 1.]]),
array([[ 0. , 0.],
       [ 0. , 1.]]),
array([[ 0, 3 ],
       [ 0, 3 ]])),

        "second": ((1,1), (1,0,0,0),
array([[ 0., 2.],
       [ 3., 1.]]),
array([[ 0. , 0.],
       [ 0. , 2.]]),
array([[ 0, 3 ],
       [ 0, 0 ]])),

        "third": ((1,1), (1,0,0,0),
array([[ 0., 1., 1. ],
       [ 6., 4., 1. ],
       [ 1., 1., 1. ],
       [ 1., 4., 6. ],
       [ 1., 1., 1. ],
       [ 6., 4., 1. ],
       [ 1., 1., 1. ],
       [ 1., 4., 6. ],
       [ 1., 1., 1. ],
       [ 6., 4., 1. ],
       [ 1., 1., 1. ],
       [ 1., 4., 6. ],
       [ 1., 1., 1. ]]),
array([[ 0.,  0.,  1.],
       [ 0.,  1.,  2.],
       [ 5.,  4.,  3.],
       [ 6.,  5.,  4.],
       [ 7.,  8.,  9.],
       [ 8.,  9., 10.],
       [13., 12., 11.],
       [14., 13., 12.],
       [15., 16., 17.],
       [16., 17., 18.],
       [21., 20., 19.],
       [22., 21., 20.],
       [23., 24., 25.]]),
array([[0, 3, 3],
       [0, 0, 0],
       [1, 1, 0],
       [0, 0, 0],
       [0, 3, 3],
       [0, 0, 0],
       [1, 1, 0],
       [0, 0, 0],
       [0, 3, 3],
       [0, 0, 0],
       [1, 1, 0],
       [0, 0, 0],
       [0, 3, 3]])),

       "fourth": ((1,1), (0,1,0,0),
array([[ 0., 2.],
       [ 3., 4.]]),
array([[ 0. , 0.],
       [ 0. , 2.]]),
array([[ 0, 2 ],
       [ 3, 3 ]])),

       "fifth": ((1,1), (0,0,1,0),
array([[ 0., 2.],
       [ 3., 4.]]),
array([[ 0. , 0.],
       [ 0. , 2.]]),
array([[ 2, 1 ],
       [ 2, 2 ]])),       

       "sixth": ((1,1), (0,0,0,1),
array([[ 0., 2.],
       [ 3., 4.]]),
array([[ 0. , 0.],
       [ 0. , 2.]]),
array([[ 1, 0 ],
       [ 1, 1 ]])),

       "seventh": ((1,1), (.6,0.,0.,.4),
array([[ 0., 2.],
       [ 3., 4.]]),
array([[0.    , 4.9222],
       [7.3832, 8.3063]]),
array([[0, 3],
       [1, 0]])),       

       "eighth": ((2,3), (1,0,0,0),
array([[1.864 , 4.4329, 6.312 , 2.6543, 1.912 ],
       [5.8338, 2.7948, 0.    , 0.1748, 2.9702],
       [1.3889, 2.9069, 1.2973, 8.5596, 0.8003]]),
array([[7.2277, 2.7948, 0.    , 0.1748, 2.8291],
       [2.7948, 0.    , 0.    , 0.    , 0.1748],
       [4.2042, 1.2973, 0.    , 0.1748, 3.145 ]]),
array([[1, 2, 2, 2, 3],
       [1, 1, 0, 3, 3],
       [1, 1, 0, 0, 0]])),

       "ninth": ((4,3), (1,0,0,0),
array([[1.864 , 4.4329, 6.312 , 2.6543, 1.912 ],
       [5.8338, 2.7948, 3.4227, 0.1748, 2.9702],
       [1.3889, 2.9069, 1.2973, 8.5596, 0.8003],
       [0.9874, 5.1054, 0.    , 1.3459, 5.5921],
       [3.226 , 0.1908, 6.7132, 1.7523, 4.3909],
       [2.0506, 8.7113, 0.7706, 0.8218, 2.2346],
       [0.8339, 3.2938, 0.543 , 9.6469, 1.7962]]),
array([[11.427 ,  6.9991,  4.72  ,  4.8948,  7.5491],
       [ 5.5932,  4.2042,  1.2973,  4.72  ,  4.8948],
       [ 4.2042,  1.2973,  0.    ,  1.2973,  6.938 ],
       [ 5.1054,  0.    ,  0.    ,  0.    ,  1.3459],
       [ 5.2963,  5.1054,  0.    ,  1.3459,  3.0982],
       [ 8.5223,  4.6906,  3.92  ,  3.0982,  3.92  ],
       [ 8.5275,  5.2336,  4.6906,  3.92  ,  6.1546]]),
array([[2, 2, 2, 2, 3],
       [2, 2, 2, 3, 3],
       [1, 1, 2, 3, 2],
       [1, 1, 0, 3, 3],
       [1, 0, 0, 0, 3],
       [0, 1, 1, 0, 3],
       [1, 1, 0, 0, 0]])),

       "tenth": ((1,1), (.1,.2,.3,.4),
array([[ 0., 3.],
       [ 1., 15.]]),
array([[  0.      , 124.390244],
       [138.04878 , 175.243902]]),
array([[1, 0],
       [1, 1]])),

       "eleventh": ((4, 5), (0.4, 0.361247, 0.025903, 0.21285),
array([[ 1.864041,  4.432889,  6.311956,  2.65428 ,  1.91201 ,  5.833797,  2.794818,  3.422686,  0.17483 ],
       [ 2.970219,  1.388945,  2.906939,  1.297296,  8.559583,  0.80034 ,  0.987354,  5.105444, 10.495868],
       [ 1.34585 ,  5.592108,  3.226013,  0.190834,  6.713173,  1.752331,  4.390865,  2.050603,  8.711304],
       [ 0.77061 ,  0.82185 ,  2.234567,  0.833858,  0.      ,  0.543006,  9.646865,  1.796218,  3.357212],
       [ 4.177859,  7.938566,  0.284866,  1.532829,  9.413375,  1.940443,  2.902589,  5.075948,  4.755532],
       [ 4.019696,  1.06274 ,  1.915935,  5.316311,  6.777291,  6.280372, 11.464919,  0.286654,  0.951157],
       [ 3.748847,  0.572896,  3.756583,  1.870234,  2.215651, 10.424481, 22.641383,  3.547671,  4.154724]]),
array([[122.998351,  92.89197 ,  74.111299,  62.402559,  58.180965,  57.271299,  68.361776,  90.951333, 138.276601],
       [ 82.364419,  62.789143,  48.582141,  39.583695,  34.315656,  40.058192,  51.804308,  71.971124, 107.741674],
       [ 68.94522 ,  47.743952,  34.004054,  25.239809,  16.522312,  27.493479,  42.597558,  62.311251,  92.368096],
       [ 68.631018,  47.264001,  29.57409 ,  16.549611,   0.      ,  19.556707,  38.092103,  59.53309 ,  85.566846],
       [ 79.053764,  51.273684,  36.949256,  27.014839,  20.658427,  34.494435,  51.075224,  64.849242,  87.862533],
       [ 95.520778,  65.343383,  48.646031,  43.821622,  48.045132,  58.584868,  70.491583,  87.587449, 106.649053],
       [124.08032 ,  84.588454,  68.316463,  69.009751,  79.822319,  95.178076, 106.673187, 123.954084, 149.420957]]),
array([[1, 2, 2, 2, 2, 2, 2, 2, 2],
       [1, 1, 1, 2, 2, 2, 2, 3, 3],
       [1, 1, 1, 1, 2, 2, 3, 3, 3],
       [1, 1, 1, 1, 0, 3, 3, 3, 3],
       [1, 1, 0, 0, 0, 3, 3, 3, 3],
       [1, 0, 0, 0, 0, 0, 0, 0, 3],
       [0, 0, 0, 0, 0, 0, 0, 0, 3]])),

       "twelve": ((7, 6), (0.6, 0.129096, 0.048828, 0.222076),
array([[1.864041e+00, 4.432889e+00, 6.311956e+00, 2.654280e+00, 1.912010e+00, 5.833797e+00, 2.794818e+00, 3.422686e+00, 1.748296e-01, 2.970219e+00, 1.388945e+00],
       [2.906939e+00, 1.297296e+00, 8.559583e+00, 8.003398e-01, 9.873536e-01, 5.105444e+00, 1.049587e+01, 1.345850e+00, 5.592108e+00, 3.226013e+00, 1.908344e-01],
       [6.713173e+00, 1.752331e+00, 4.390865e+00, 2.050603e+00, 8.711304e+00, 7.706095e-01, 8.218498e-01, 2.234567e+00, 8.338580e-01, 3.293815e+00, 5.430058e-01],
       [9.646865e+00, 1.796218e+00, 3.357212e+00, 4.177859e+00, 7.938566e+00, 2.848659e-01, 1.532829e+00, 9.413375e+00, 1.940443e+00, 2.902589e+00, 5.075948e+00],
       [4.755532e+00, 4.019696e+00, 1.062740e+00, 1.915935e+00, 5.316311e+00, 6.777291e+00, 6.280372e+00, 1.146492e+01, 2.866536e-01, 9.511573e-01, 3.748847e+00],
       [5.728955e-01, 3.756583e+00, 1.870234e+00, 2.215651e+00, 1.042448e+01, 2.264138e+01, 3.547671e+00, 4.154724e+00, 4.400122e+00, 1.308252e+01, 7.680946e+00],
       [1.455629e+00, 2.480491e+00, 8.465064e+00, 3.871816e+00, 3.503526e+00, 0.000000e+00, 6.865094e+00, 3.033251e+00, 1.160614e+01, 1.224659e-02, 4.011425e+00],
       [2.015195e+00, 7.238840e+00, 1.010192e+01, 3.995933e+00, 4.015114e+00, 4.628188e+00, 6.527245e+00, 7.865932e+00, 4.254089e-01, 3.389442e+00, 2.805231e+00],
       [6.744596e-01, 5.392216e+00, 2.328087e+00, 7.018923e+00, 1.066962e+01, 2.481954e+00, 6.866165e-01, 4.570490e+00, 2.580088e+01, 5.010473e+00, 3.058032e+00],
       [9.244201e+00, 1.069470e+01, 2.999845e+00, 2.112717e+01, 8.747328e+00, 1.316188e+00, 3.990755e+00, 3.382583e+01, 2.060988e+00, 7.039835e+00, 1.390385e+00],
       [2.782159e+00, 1.511451e+01, 4.882823e-01, 5.621786e-01, 1.515415e+01, 2.322636e+00, 8.566184e+00, 6.364302e+00, 2.505558e+00, 1.850263e+00, 7.950014e-01],
       [1.416677e+00, 6.697207e+00, 1.991169e+00, 1.005210e+01, 8.390594e+00, 8.310030e+00, 2.817146e+00, 1.003625e+01, 2.739339e+00, 6.338128e+00, 1.037500e+01],
       [2.852662e+00, 6.481832e+00, 2.182930e-01, 1.160502e+00, 1.391117e+00, 1.491163e-01, 4.306796e+00, 5.316608e+00, 5.845711e+00, 1.374475e+01, 4.621907e+00]]),
array([[110.916907,  84.314503,  79.059244,  73.667888,  75.946445,  76.757757,  80.835701,  79.484301,  85.958771,  94.649124, 117.294538],
       [ 86.561496,  68.363255,  61.290225,  60.660423,  64.280718,  60.733695,  61.057403,  66.647268,  68.569396,  76.221553,  90.14319 ],
       [ 75.472169,  59.86086 ,  53.075569,  53.652666,  54.95272 ,  53.204062,  54.802622,  59.25269 ,  62.403854,  66.406225,  79.919428],
       [ 68.337794,  53.350048,  45.543734,  44.313342,  46.375204,  48.74453 ,  49.610605,  53.684828,  57.003276,  61.392583,  74.412771],
       [ 63.248469,  46.476328,  40.353707,  36.782001,  38.214264,  39.455434,  38.439056,  43.394248,  52.198955,  58.249655,  72.495605],
       [ 58.772372,  43.179794,  36.218523,  30.118481,  23.407694,  13.209773,  26.103095,  33.985936,  44.085998,  53.269435,  74.681966],
       [ 58.623319,  45.661004,  32.811469,  22.459048,  11.740299,   0.      ,  11.170188,  27.343274,  38.764392,  56.335844,  70.281018],
       [ 66.259601,  51.152638,  37.953008,  27.89249 ,  18.768717,   9.72953 ,  19.856369,  33.285774,  51.483615,  59.292708,  76.109012],
       [ 74.963038,  58.861433,  50.363612,  39.677428,  29.701505,  23.4001  ,  30.402288,  46.618261,  56.743452,  72.170489,  88.396307],
       [ 89.175269,  71.305052,  63.125965,  53.237178,  44.177942,  35.682219,  41.394556,  55.610454,  85.316973,  83.557664, 100.832284],
       [105.207977,  82.13674 ,  75.300787,  75.254389,  57.523367,  49.706788,  52.44161 ,  72.457871,  84.185415,  93.34104 , 111.153867],
       [114.626653,  95.398744,  84.854839,  80.520326,  75.657785,  63.205263,  68.45978 ,  80.357945,  91.66062 , 102.47346 , 127.110936],
       [143.606363, 117.672345, 102.505526,  99.061954,  93.005353,  84.247438,  83.834108,  98.089009, 107.296619, 122.362169, 158.756662]]),
array([[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3],
       [1, 2, 2, 2, 3, 2, 2, 2, 2, 2, 3],
       [1, 2, 2, 2, 2, 2, 2, 3, 2, 3, 3],
       [1, 1, 2, 2, 2, 2, 3, 3, 2, 3, 3],
       [1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3],
       [1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
       [1, 1, 1, 1, 1, 0, 3, 3, 3, 3, 3],
       [1, 1, 1, 1, 1, 0, 3, 0, 0, 0, 3],
       [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 3],
       [1, 1, 0, 0, 1, 0, 0, 3, 0, 0, 3],
       [1, 1, 0, 0, 1, 0, 0, 3, 3, 3, 3],
       [1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 3],
       [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]))
}

    if len(sys.argv) == 1:
        sum_incorrect_policies = max_distance_diff = 0
        for name in tests:
            print("Running test", name)
            incorrect_policies, distance_diff = evaluate(*tests[name])
            sum_incorrect_policies += incorrect_policies
            max_distance_diff = max(max_distance_diff, distance_diff)
            print()
        success = sum_incorrect_policies == 0 and max_distance_diff < 1e-2
        print("All tests passed." if success else "Some tests failed.", "The total number of positions with incorrect policies is", sum_incorrect_policies, "and the maximal of differences between the correct and your distance is", max_distance_diff)
    else:
        name = sys.argv[1]
        if name in tests:
            evaluate(*tests[name])
        else:
            print("Unknown test", name)

"""
To run all tests, run the command
$ python3 probability_test.py

To run a test NAME, run the command
$ python3 probability_test.py NAME
"""
if __name__ == "__main__":
    main()
