import sys
import numpy
from numpy import array
from robot_test import Environment
from robot_control import RobotControl

# Run a single tests to verify the correctness of calculating the probabilities and policies
def evaluate(destination, rotation_probability, safety_map_restricted, expected_survivability, expected_policy):
    rows = len(safety_map_restricted) + 2
    columns = len(safety_map_restricted[0]) + 2
    safety_map = numpy.zeros((rows, columns))
    safety_map[1:rows-1,1:columns-1] = safety_map_restricted
    env = Environment(destination=array(destination), safety_map=safety_map, rotation_probability=array(rotation_probability))

    print("Test safety map:")
    print(safety_map)
    print("Destination", destination)
    print("Probabilities of rotations: forward", env.forward_probability, "right", env.right_probability, "backward", env.backward_probability, "left", env.left_probability)

    robot = RobotControl(env)
    survivability = robot.get_survivability()
    policy = robot.get_policy()

    print("Expected survivability:")
    print(expected_survivability)
    print("Your survivability:")
    print(survivability)
    print("Expected policy:")
    print(expected_policy)
    print("Your policy:")
    print(policy)

    incorrect_policies = 0
    max_survivability_diff = 0.
    for i in range(1,env.rows-1):
        for j in range(1,env.columns-1):
            if i != destination[0] or j != destination[1]:
                max_survivability_diff = max(max_survivability_diff, abs(survivability[i,j] - expected_survivability[i,j]))
                if policy[i,j] != expected_policy[i,j]:
                    incorrect_policies += 1

    print("The number of positions with incorrect policies is", incorrect_policies)
    print("The maximal of differences between the correct and your probabilities of survivability is", max_survivability_diff)

    return (incorrect_policies, max_survivability_diff)

def main():
    # destination, rotation_probability, safety_map, expected_survivability, expected_policy
    tests = {
        "first": ((1,1), (1,0,0,0),
[[  1, .5],
 [0.8, .1]],
array([[0. , 0. , 0. , 0. ],
       [0. , 1. , 1. , 0. ],
       [0. , 1. , 0.8, 0. ],
       [0. , 0. , 0. , 0. ]]),
array([[0, 0, 0, 0],
       [0, 0, 3, 0],
       [0, 0, 3, 0],
       [0, 0, 0, 0]])),

        "second": ((1,1), (1,0,0,0),
[[  1, .8],
 [0.5, .1]],
array([[0. , 0. , 0. , 0. ],
       [0. , 1. , 1. , 0. ],
       [0. , 1. , 0.8, 0. ],
       [0. , 0. , 0. , 0. ]]),
array([[0, 0, 0, 0],
       [0, 0, 3, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0]])),

        "third": ((1,1), (1,0,0,0),
[[  1, 0.9, 0.9 ],
 [0.1, 0.1, 0.9 ],
 [0.9, 0.9, 0.9 ],
 [0.9, 0.1, 0.1 ],
 [0.9, 0.9, 0.9 ],
 [0.1, 0.1, 0.9 ],
 [0.9, 0.9, 0.9 ],
 [0.9, 0.1, 0.1 ],
 [0.9, 0.9, 0.9 ],
 [0.1, 0.1, 0.9 ],
 [0.9, 0.9, 0.9 ],
 [0.9, 0.1, 0.1 ],
 [0.9, 0.9, 0.9 ]],
array([[0.    , 0.    , 0.    , 0.    , 0.    ],
       [0.    , 1.    , 1.    , 0.9   , 0.    ],
       [0.    , 1.    , 0.9   , 0.81  , 0.    ],
       [0.    , 0.5905, 0.6561, 0.729 , 0.    ],
       [0.    , 0.5314, 0.5905, 0.6561, 0.    ],
       [0.    , 0.4783, 0.4305, 0.3874, 0.    ],
       [0.    , 0.4305, 0.3874, 0.3487, 0.    ],
       [0.    , 0.2542, 0.2824, 0.3138, 0.    ],
       [0.    , 0.2288, 0.2542, 0.2824, 0.    ],
       [0.    , 0.2059, 0.1853, 0.1668, 0.    ],
       [0.    , 0.1853, 0.1668, 0.1501, 0.    ],
       [0.    , 0.1094, 0.1216, 0.1351, 0.    ],
       [0.    , 0.0985, 0.1094, 0.1216, 0.    ],
       [0.    , 0.0886, 0.0798, 0.0718, 0.    ],
       [0.    , 0.    , 0.    , 0.    , 0.    ]]),
array([[0, 0, 0, 0, 0],
       [0, 0, 3, 3, 0],
       [0, 0, 0, 0, 0],
       [0, 1, 1, 0, 0],
       [0, 0, 0, 0, 0],
       [0, 0, 3, 3, 0],
       [0, 0, 0, 0, 0],
       [0, 1, 1, 0, 0],
       [0, 0, 0, 0, 0],
       [0, 0, 3, 3, 0],
       [0, 0, 0, 0, 0],
       [0, 1, 1, 0, 0],
       [0, 0, 0, 0, 0],
       [0, 0, 3, 3, 0],
       [0, 0, 0, 0, 0]])),

       "fourth": ((2,3), (1,0,0,0),
array([[0.7991, 0.867 , 0.868 , 0.9174, 0.9751],
       [0.4749, 0.9689, 1.    , 0.5841, 0.9635],
       [0.8637, 0.9449, 0.7176, 0.4669, 0.6768]]),
array([[0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    ],
       [0.    , 0.84  , 0.9689, 1.    , 0.868 , 0.7963, 0.    ],
       [0.    , 0.9689, 1.    , 1.    , 1.    , 0.7765, 0.    ],
       [0.    , 0.9155, 0.9689, 1.    , 0.7176, 0.7481, 0.    ],
       [0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    ]]),
array([[0, 0, 0, 0, 0, 0, 0],
       [0, 1, 2, 2, 3, 3, 0],
       [0, 1, 1, 0, 3, 0, 0],
       [0, 1, 0, 0, 3, 0, 0],
       [0, 0, 0, 0, 0, 0, 0]])),

       "fifth": ((7,5), (1,0,0,0),
array([[0.6598, 0.7443, 0.669 , 0.9374, 0.6701, 0.4986, 0.358 , 0.6189],
       [0.9507, 0.7944, 0.9631, 0.8272, 0.3093, 0.83  , 0.3192, 0.4921],
       [0.8088, 0.6795, 0.624 , 0.8788, 0.3877, 0.4098, 0.2738, 0.5414],
       [0.7051, 0.4129, 0.3833, 0.7752, 0.6504, 0.9869, 0.7311, 0.7089],
       [0.9723, 0.8258, 0.4321, 0.466 , 0.3817, 0.6702, 0.8298, 0.5589],
       [0.9639, 0.687 , 0.6613, 0.8542, 0.7244, 0.5565, 0.7179, 0.6965],
       [0.7975, 0.9366, 0.8958, 0.4113, 1.    , 0.4589, 0.3979, 0.7189],
       [0.5954, 0.264 , 0.5736, 0.5291, 0.7045, 0.976 , 0.4923, 0.1291],
       [0.9037, 0.6483, 0.7423, 0.8921, 0.8097, 0.7699, 0.6712, 0.3092],
       [0.966 , 0.6379, 0.8575, 0.5057, 0.9742, 0.2602, 0.7   , 0.9952],
       [0.8613, 0.2275, 0.7794, 0.7686, 0.6383, 0.6101, 0.9901, 0.5093],
       [0.5603, 0.8533, 0.975 , 0.9218, 0.7796, 0.4983, 0.9023, 0.7029]]),
array([[0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    ],
       [0.    , 0.1428, 0.1243, 0.1565, 0.1625, 0.1523, 0.1021, 0.0509, 0.0368, 0.    ],
       [0.    , 0.1503, 0.1565, 0.1625, 0.1964, 0.1625, 0.1093, 0.0907, 0.0748, 0.    ],
       [0.    , 0.1858, 0.1503, 0.1964, 0.2235, 0.1964, 0.2666, 0.1949, 0.1382, 0.    ],
       [0.    , 0.2635, 0.2321, 0.2235, 0.2884, 0.2765, 0.2702, 0.2666, 0.1949, 0.    ],
       [0.    , 0.271 , 0.2811, 0.4092, 0.6188, 0.7244, 0.4031, 0.2894, 0.2401, 0.    ],
       [0.    , 0.2811, 0.4092, 0.6188, 0.7244, 1.    , 0.7244, 0.4031, 0.2894, 0.    ],
       [0.    , 0.3451, 0.3684, 0.4113, 1.    , 1.    , 1.    , 0.4589, 0.2016, 0.    ],
       [0.    , 0.2752, 0.3451, 0.3777, 0.7045, 1.    , 0.7045, 0.6876, 0.3385, 0.    ],
       [0.    , 0.2449, 0.3777, 0.5089, 0.5704, 0.7045, 0.6876, 0.5294, 0.3553, 0.    ],
       [0.    , 0.2213, 0.3239, 0.3777, 0.5557, 0.5704, 0.5557, 0.3553, 0.2487, 0.    ],
       [0.    , 0.2138, 0.2525, 0.3239, 0.3547, 0.5557, 0.3547, 0.2487, 0.2475, 0.    ],
       [0.    , 0.2121, 0.2485, 0.2549, 0.2765, 0.3547, 0.2765, 0.2463, 0.2222, 0.    ],
       [0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    ]]),
array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 2, 2, 2, 2, 3, 3, 3, 2, 0],
       [0, 2, 1, 1, 2, 3, 2, 3, 2, 0],
       [0, 2, 3, 1, 2, 3, 2, 2, 2, 0],
       [0, 2, 2, 1, 2, 2, 2, 3, 3, 0],
       [0, 2, 2, 2, 2, 2, 2, 2, 3, 0],
       [0, 1, 1, 1, 1, 2, 3, 3, 3, 0],
       [0, 1, 1, 1, 1, 0, 3, 3, 0, 0],
       [0, 0, 0, 2, 1, 0, 3, 3, 3, 0],
       [0, 1, 1, 1, 1, 0, 0, 3, 3, 0],
       [0, 0, 1, 0, 1, 0, 3, 0, 3, 0],
       [0, 0, 1, 0, 1, 0, 3, 0, 0, 0],
       [0, 1, 1, 1, 1, 0, 3, 0, 3, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])),

        "sixth": ((1,1), (0.6,0,0,0.4),
[[  1, .5],
 [0.8, .1]],
array([[0.    , 0.    , 0.    , 0.    ],
       [0.    , 1.    , 0.6151, 0.    ],
       [0.    , 0.6   , 0.3765, 0.    ],
       [0.    , 0.    , 0.    , 0.    ]]),
array([[0, 0, 0, 0],
       [0, 0, 3, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0]])),

       "seventh": ((2,3), (0.6,0,0,0.4),
array([[0.7991, 0.867 , 0.868 , 0.9174, 0.9751],
       [0.4749, 0.9689, 1.    , 0.5841, 0.9635],
       [0.8637, 0.9449, 0.7176, 0.4669, 0.6768]]),
array([[0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    ],
       [0.    , 0.4621, 0.793 , 0.819 , 0.5967, 0.5088, 0.    ],
       [0.    , 0.6564, 0.875 , 1.    , 0.7285, 0.4679, 0.    ],
       [0.    , 0.5292, 0.7136, 0.8697, 0.5049, 0.3648, 0.    ],
       [0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    ]]),
array([[0, 0, 0, 0, 0, 0, 0],
       [0, 2, 2, 2, 3, 3, 0],
       [0, 1, 1, 0, 0, 0, 0],
       [0, 1, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0]])),

       "eight": ((7,5), (0.6,0.0976688695153275,0.015076367487771759,0.2872547629969008),
array([[0.6598, 0.7443, 0.669 , 0.9374, 0.6701, 0.4986, 0.358 , 0.6189],
       [0.9507, 0.7944, 0.9631, 0.8272, 0.3093, 0.83  , 0.3192, 0.4921],
       [0.8088, 0.6795, 0.624 , 0.8788, 0.3877, 0.4098, 0.2738, 0.5414],
       [0.7051, 0.4129, 0.3833, 0.7752, 0.6504, 0.9869, 0.7311, 0.7089],
       [0.9723, 0.8258, 0.4321, 0.466 , 0.3817, 0.6702, 0.8298, 0.5589],
       [0.9639, 0.687 , 0.6613, 0.8542, 0.7244, 0.5565, 0.7179, 0.6965],
       [0.7975, 0.9366, 0.8958, 0.4113, 1.    , 0.4589, 0.3979, 0.7189],
       [0.5954, 0.264 , 0.5736, 0.5291, 0.7045, 0.976 , 0.4923, 0.1291],
       [0.9037, 0.6483, 0.7423, 0.8921, 0.8097, 0.7699, 0.6712, 0.3092],
       [0.966 , 0.6379, 0.8575, 0.5057, 0.9742, 0.2602, 0.7   , 0.9952],
       [0.8613, 0.2275, 0.7794, 0.7686, 0.6383, 0.6101, 0.9901, 0.5093],
       [0.5603, 0.8533, 0.975 , 0.9218, 0.7796, 0.4983, 0.9023, 0.7029]]),
array([[0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    ],
       [0.    , 0.0116, 0.0124, 0.0187, 0.019 , 0.0128, 0.0101, 0.0042, 0.0025, 0.    ],
       [0.    , 0.0156, 0.0169, 0.0219, 0.0309, 0.0228, 0.0178, 0.0126, 0.0081, 0.    ],
       [0.    , 0.024 , 0.0206, 0.0349, 0.0504, 0.057 , 0.0645, 0.045 , 0.0238, 0.    ],
       [0.    , 0.0466, 0.0494, 0.0552, 0.0892, 0.1154, 0.099 , 0.0881, 0.0529, 0.    ],
       [0.    , 0.0694, 0.0805, 0.1272, 0.2323, 0.3503, 0.1809, 0.1165, 0.0809, 0.    ],
       [0.    , 0.0862, 0.1402, 0.2251, 0.3658, 0.6989, 0.415 , 0.1784, 0.0961, 0.    ],
       [0.    , 0.1156, 0.1571, 0.2326, 0.714 , 1.    , 0.7391, 0.2575, 0.0717, 0.    ],
       [0.    , 0.0591, 0.119 , 0.2033, 0.4078, 0.7059, 0.4102, 0.2879, 0.0985, 0.    ],
       [0.    , 0.0524, 0.0977, 0.1867, 0.267 , 0.3962, 0.346 , 0.1946, 0.0947, 0.    ],
       [0.    , 0.0455, 0.0772, 0.111 , 0.2123, 0.2308, 0.2321, 0.1017, 0.0527, 0.    ],
       [0.    , 0.0278, 0.0545, 0.079 , 0.1001, 0.1625, 0.0762, 0.0591, 0.0485, 0.    ],
       [0.    , 0.0255, 0.0364, 0.0558, 0.0681, 0.0827, 0.0503, 0.0441, 0.0263, 0.    ],
       [0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    ]]),
array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 2, 2, 2, 2, 3, 2, 3, 2, 0],
       [0, 2, 1, 2, 2, 3, 2, 3, 2, 0],
       [0, 2, 2, 1, 2, 2, 2, 2, 2, 0],
       [0, 2, 2, 2, 2, 2, 2, 3, 3, 0],
       [0, 2, 2, 2, 2, 2, 2, 3, 3, 0],
       [0, 1, 2, 1, 1, 2, 3, 3, 3, 0],
       [0, 1, 1, 1, 1, 0, 3, 3, 3, 0],
       [0, 0, 1, 1, 1, 0, 3, 3, 3, 0],
       [0, 1, 1, 1, 1, 0, 0, 3, 3, 0],
       [0, 1, 1, 1, 1, 0, 0, 0, 3, 0],
       [0, 0, 1, 1, 1, 0, 3, 0, 0, 0],
       [0, 1, 1, 1, 0, 0, 0, 0, 3, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])),

       "ninth": ((6,4), (0.3, 0.16798173161122487, 0.02453857001477432, 0.5074796983740008),
array([[0.9548, 0.5681, 0.9207, 0.454 , 0.8051, 0.9106],
       [0.4121, 0.8548, 0.8899, 0.8079, 0.8762, 0.6541],
       [0.8056, 0.3403, 0.8175, 0.8368, 0.1817, 0.9   ],
       [0.8381, 0.9713, 0.987 , 0.9079, 0.9473, 0.9999],
       [0.6695, 0.8573, 0.3877, 0.4098, 0.2738, 0.5414],
       [0.7051, 0.4129, 0.3833, 1.    , 0.6504, 0.9869],
       [0.7311, 0.7089, 0.9723, 0.8258, 0.4321, 0.466 ],
       [0.3817, 0.6702, 0.8298, 0.5589, 0.9639, 0.687 ],
       [0.6613, 0.8542, 0.7244, 0.5565, 0.7179, 0.6965],
       [0.7975, 0.9366, 0.8958, 0.4113, 0.7675, 0.4589]]),
array([[0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    ],
       [0.    , 0.0089, 0.0224, 0.0275, 0.0336, 0.0202, 0.0154, 0.    ],
       [0.    , 0.0199, 0.0316, 0.0516, 0.0625, 0.0344, 0.0318, 0.    ],
       [0.    , 0.0247, 0.0645, 0.0848, 0.107 , 0.0789, 0.0447, 0.    ],
       [0.    , 0.0532, 0.0868, 0.1167, 0.1679, 0.0957, 0.0727, 0.    ],
       [0.    , 0.0495, 0.0791, 0.2016, 0.5584, 0.2736, 0.1411, 0.    ],
       [0.    , 0.0554, 0.1731, 0.62  , 1.    , 0.5691, 0.2124, 0.    ],
       [0.    , 0.0834, 0.2082, 0.3379, 0.5929, 0.3745, 0.1466, 0.    ],
       [0.    , 0.0655, 0.1468, 0.2361, 0.3065, 0.1479, 0.0937, 0.    ],
       [0.    , 0.0456, 0.087 , 0.1285, 0.1119, 0.0895, 0.0522, 0.    ],
       [0.    , 0.0304, 0.0536, 0.0568, 0.0492, 0.0366, 0.0251, 0.    ],
       [0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    , 0.    ]]),
array([[0, 0, 0, 0, 0, 0, 0, 0],
       [0, 2, 2, 3, 3, 3, 3, 0],
       [0, 2, 2, 2, 3, 0, 3, 0],
       [0, 2, 2, 2, 3, 3, 3, 0],
       [0, 2, 2, 2, 3, 0, 3, 0],
       [0, 1, 1, 2, 3, 3, 3, 0],
       [0, 2, 2, 2, 0, 0, 0, 0],
       [0, 2, 2, 2, 1, 0, 0, 0],
       [0, 1, 1, 1, 1, 0, 0, 0],
       [0, 2, 1, 1, 1, 1, 0, 0],
       [0, 1, 1, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0]])),
}

    if len(sys.argv) == 1:
        sum_incorrect_policies = max_survivability_diff = 0
        for name in tests:
            print("Running test", name)
            incorrect_policies, survivability_diff = evaluate(*tests[name])
            sum_incorrect_policies += incorrect_policies
            max_survivability_diff = max(max_survivability_diff, survivability_diff)
            print()
        success = sum_incorrect_policies == 0 and max_survivability_diff < 1e-2
        print("All tests passed." if success else "Some tests failed.", "The total number of positions with incorrect policies is", sum_incorrect_policies, "and the maximal of differences between the correct and your probabilities of survivability is", max_survivability_diff)
    else:
        name = sys.argv[1]
        if name in tests:
            evaluate(*tests[name])
        else:
            print("Unknown test", name)

"""
To run all tests, run the command
$ python3 probability_test.py

To run a test NAME, run the command
$ python3 probability_test.py NAME
"""
if __name__ == "__main__":
    main()
